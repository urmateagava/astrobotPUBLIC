import telebot
from telebot import types
import xmlfile
import database


token = 'nicetokenbot'
bot = telebot.TeleBot(token)
signscb = {"–û–≤–µ–Ω": "aries", "–¢–µ–ª–µ—Ü": "taurus", "–ë–ª–∏–∑–Ω–µ—Ü—ã": "gemini", "–†–∞–∫": "cancer", "–õ–µ–≤": "leo",
           "–î–µ–≤–∞": "virgo", "–í–µ—Å—ã": "libra", "–°–∫–æ—Ä–ø–∏–æ–Ω": "scorpio", "–°—Ç—Ä–µ–ª–µ—Ü": "sagittarius",
           "–ö–æ–∑–µ—Ä–æ–≥": "capricorn", "–í–æ–¥–æ–ª–µ–π": "aquarius", "–†—ã–±—ã": "pisces"}
signs = ["–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã", "–†–∞–∫", "–õ–µ–≤",
         "–î–µ–≤–∞", "–í–µ—Å—ã", "–°–∫–æ—Ä–ø–∏–æ–Ω", "–°—Ç—Ä–µ–ª–µ—Ü",
         "–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã"]

days = ['–ù–∞ –≤—á–µ—Ä–∞', '–ù–∞ —Å–µ–≥–æ–¥–Ω—è', '–ù–∞ –∑–∞–≤—Ç—Ä–∞', '–ù–∞ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞']
dayscb = {'–ù–∞ –≤—á–µ—Ä–∞': 'yesterday', '–ù–∞ —Å–µ–≥–æ–¥–Ω—è': 'today', '–ù–∞ –∑–∞–≤—Ç—Ä–∞': 'tomorrow', '–ù–∞ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞': 'tomorrow02'}

wars = ['–õ–∏—á–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø', '–ì–æ—Ä–æ—Å–∫–æ–ø', '–†–∞—Å—Å—ã–ª–∫–∞']
warscb = {'–õ–∏—á–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø': 'private_horoscope', '–ì–æ—Ä–æ—Å–∫–æ–ø': 'horoscope', '–†–∞—Å—Å—ã–ª–∫–∞': 'mailing list'}


def main():
    @bot.message_handler(commands=['start'])
    def start_function(message):
        user_id = message.from_user.id
        if database.checker(user_id) is None:
            markup = types.InlineKeyboardMarkup(row_width=2)
            for sign in signs:
                btn = types.InlineKeyboardButton(sign, callback_data=signscb.get(sign))
                markup.add(btn)
            bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫', reply_markup=markup)
            user_name = message.from_user.username
            first_name = message.from_user.first_name
            last_name = message.from_user.last_name
            database.set_user(user_id, user_name, first_name, last_name)
            database.set_user_j_day(user_id)
        else:
            descript = """
            üîÆ AAB –º–æ–∂–µ—Ç:
        
            –°–æ—Å—Ç–∞–≤–ª—è—Ç—å –≤–∞—à –ª–∏—á–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø(/ph) ü¶ã
            **********************************************************
            –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≤–∞—à –∑–Ω–∞–∫
            –∑–æ–¥–∏–∞–∫–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–≥–æ –≤ –±—É–¥—É—â–µ–º (–µ—Å–ª–∏ –≤ –ø–µ—Ä–≤—ã–π
            —Ä–∞–∑ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ —Å–≤–æ–π –∑–Ω–∞–∫, –µ–≥–æ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
            –∫–æ–º–∞–Ω–¥–æ–π /reset_sign)
            
            
            –°–æ—Å—Ç–∞–≤–ª—è—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –ª—é–±–æ–π –∏–∑ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞
            **********************************************************
            (–ö–æ–º–∞–Ω–¥–∞ /h)
            –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–ª–∏–∑–∫–æ–º—É –æ –µ–≥–æ —Å—É–¥—å–±–µ üåÖ
            
            
            –†–∞—Å—Å—ã–ª–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ 
            **********************************************************
            –î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –±–æ—Ç —Å–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è–ª –≤–∞–º –≥–æ—Ä–æ—Å–∫–æ–ø 
            –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
            (–∫–æ–º–∞–Ω–¥–∞ /m)
            –≠—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ ‚òò
            –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /m_endÔ∏è 
            """
            bot.send_message(user_id, descript)

    @bot.message_handler(commands=['ph'])
    def personal_horoscope(message):
        user_id = message.from_user.id
        markup = types.InlineKeyboardMarkup(row_width=2)
        for day in days:
            btn = types.InlineKeyboardButton(day, callback_data=dayscb.get(day))
            markup.add(btn)
        bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å', reply_markup=markup)

    @bot.message_handler(commands=['reset_sign'])
    def resetsign(message):
        user_id = message.from_user.id
        bot.reply_to(message, """
        –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞–∫ –Ω–∞—á–∏–Ω–∞—è —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã 
        (–û–≤–µ–Ω, –¢–µ–ª–µ—Ü, –ë–ª–∏–∑–Ω–µ—Ü—ã, –†–∞–∫, –õ–µ–≤,
             –î–µ–≤–∞, –í–µ—Å—ã, –°–∫–æ—Ä–ø–∏–æ–Ω, –°—Ç—Ä–µ–ª–µ—Ü,
             –ö–æ–∑–µ—Ä–æ–≥, –í–æ–¥–æ–ª–µ–π, –†—ã–±—ã)
             """)
        @bot.message_handler(content_types=['text'])
        def msgresetsign(message):
            global text
            text = message.text
            if text in signs:
                database.power_set_sign(user_id, signscb.get(text))
                bot.send_message(user_id, '–ó–Ω–∞–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω')
            elif text not in signs:
                bot.send_message(user_id, '–ó–Ω–∞–∫ –≤–≤–µ–¥–µ–Ω –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
        bot.register_next_step_handler(message, msgresetsign)

    @bot.message_handler(commands=['h'])
    def horoscope(message):
        user_id = message.from_user.id
        markup = types.InlineKeyboardMarkup(row_width=2)
        for sign in signs:
            btn = types.InlineKeyboardButton(sign, callback_data=signscb.get(sign))
            markup.add(btn)
        bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫', reply_markup=markup)

    @bot.message_handler(commands=['m'])
    def mailing(message):
        user_id = message.from_user.id
        if database.check_mailling(user_id)[0]:
            bot.send_message(user_id, '–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É')
        else:
            database.upmailling(user_id)
            bot.send_message(user_id, '–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É')

    @bot.message_handler(commands=['m_end'])
    def mailingdown(message):
        user_id = message.from_user.id
        if database.check_mailling(user_id)[0]:
            database.downmailling(user_id)
            bot.send_message(user_id, '–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏')
        else:
            bot.send_message(user_id, '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É')

    @bot.callback_query_handler(func=lambda call: True)
    def markups(call):
        user_id = call.from_user.id
        if call.data in dayscb.values():
            day = call.data
            sign = database.take_sign(user_id)
            resp = xmlfile.astro(sign[0], day)
            bot.send_message(user_id, resp)
        else:
            if call.data in signscb.values():
                markup = types.InlineKeyboardMarkup(row_width=2)
                for day in days:
                    btn = types.InlineKeyboardButton(day, callback_data=call.data + "/" + dayscb.get(day))
                    markup.add(btn)
                bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å', reply_markup=markup)
            else:
                call_data = str(call.data).split('/')
                day = call_data[1]
                sign = call_data[0]
                resp = xmlfile.astro(sign, day)
                if database.checker_f_sign(user_id, user_id) is None:
                    database.set_user_sign(user_id, sign)
                bot.send_message(user_id, resp)
